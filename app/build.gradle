apply plugin: 'com.android.application'

android {
    namespace 'com.termux.x11'
    //noinspection GrDeprecatedAPIUsage
    compileSdkVersion 34
    defaultConfig {
        applicationId "com.termux.x11"
        minSdkVersion 26
        targetSdkVersion 34
        versionCode 15
        def commit= 'git rev-parse --verify --short HEAD'.execute().text.trim()
        def version = "1.03.01"
        versionName "${version}-${commit.length()==1?"nongit":commit}-${(new Date()).format("dd.MM.yy")}"
        buildConfigField "String", "COMMIT", "\"" + ("git rev-parse HEAD\n".execute().getText().trim() ?: (System.getenv('CURRENT_COMMIT') ?: "NO_COMMIT")) + "\""
    }

    signingConfigs.debug {
        storeFile file('testkey_untrusted.jks')
        keyAlias 'alias'
        storePassword 'xrj45yWGLbsO7W0v'
        keyPassword 'xrj45yWGLbsO7W0v'
    }

    splits.abi {
        enable true
        reset()

        include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
        universalApk true
    }

    compileOptions.sourceCompatibility JavaVersion.VERSION_1_9
    compileOptions.targetCompatibility JavaVersion.VERSION_1_9
    externalNativeBuild.cmake.path "src/main/cpp/CMakeLists.txt"
    packagingOptions.jniLibs.useLegacyPackaging false
    buildFeatures.aidl true
    buildFeatures.buildConfig true
    buildTypes.debug {
        signingConfig signingConfigs.debug
        postprocessing {
            removeUnusedCode true
            removeUnusedResources true
            obfuscate false
            optimizeCode true
        }
    }
}

dependencies {
    //noinspection DifferentStdlibGradleVersion
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:2.1.20"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.8.7'
    implementation 'androidx.preference:preference:1.2.1'
    compileOnly project(':shell-loader:stub')
}
afterEvaluate {
    tasks.register("generatePrefs") {
        //noinspection UnnecessaryQualifiedReference
        def xml = groovy.xml.DOMBuilder.parse((new StringReader(file('src/main/res/xml/preferences.xml').text)))
        def preferenceNodes = xml.documentElement.getElementsByTagName("*")
        def preferences = []

        for (int i = 0; i < preferenceNodes.length; i++) {
            def node = preferenceNodes.item(i)
            if (node.nodeName == 'EditTextPreference' && node.getAttribute("app:key") != "extra_keys_config")
                preferences << [ type: 'String',  key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
            else if (node.nodeName == 'SeekBarPreference')
                preferences << [ type: 'Int', key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
            else if (node.nodeName == 'ListPreference') {
                def entries = node.getAttribute("app:entries")
                def values = node.getAttribute("app:entryValues")
                preferences << [type: 'List', key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue"),
                                entries: entries.substring(7, entries.length()), values: values.substring(7, values.length())]
            }
            else if (node.nodeName == 'SwitchPreferenceCompat')
                preferences << [ type: 'Boolean',  key: node.getAttribute("app:key"), default: node.getAttribute("app:defaultValue") ]
        }

        def out = file('build/generated/java/com/termux/x11/Prefs.java')
        out.getParentFile().exists() || out.getParentFile().mkdirs()
        out.delete()
        out.createNewFile()

        out << 'package com.termux.x11;\n'
        out << 'import java.util.HashMap;\n'
        out << 'import android.content.Context;\n'
        out << 'import com.termux.x11.utils.TermuxX11ExtraKeys;\n'
        out << '\n'
        out << 'public class Prefs extends LoriePreferences.PrefsProto {\n'
        preferences.each {
            if (it.type == 'Int' || it.type == 'Boolean')
                out << "  public final ${it.type}Preference ${it.key} = new ${it.type}Preference(\"${it.key}\", ${it.default});\n"
            else if (it.type == 'String')
                out << "  public final StringPreference ${it.key} = new StringPreference(\"${it.key}\", \"${it.default}\");\n"
            else if (it.type == 'List')
                out << "  public final ${it.type}Preference ${it.key} = new ${it.type}Preference(\"${it.key}\", \"${it.default}\", R.array.${it.entries}, R.array.${it.values});\n"
        }
        out << '  public final StringPreference extra_keys_config = new StringPreference("extra_keys_config", TermuxX11ExtraKeys.DEFAULT_IVALUE_EXTRA_KEYS);\n'
        out << '  public final HashMap<String, Preference> keys = new HashMap<>() {{\n'
        preferences.each { out << '    put("' + it.key + '", ' + it.key + ');\n' }
        out << '    put("extra_keys_config", extra_keys_config);\n'
        out << '  }};\n'
        out << '\n'
        out << '  public Prefs(Context ctx) {\n'
        out << '    super(ctx);\n'
        out << '  }\n'
        out << '}\n'
    }
    android.sourceSets.main.java.srcDirs += 'build/generated/java'
    preBuild.dependsOn generatePrefs
}
